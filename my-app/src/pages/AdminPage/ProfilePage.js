import React, { useState, useEffect } from 'react'; // Gi·ªØ useEffect n·∫øu c·∫ßn cho m·ª•c ƒë√≠ch kh√°c, nh∆∞ng s·∫Ω kh√¥ng fetch data
import './ProfilePage.css'; // Import file CSS t∆∞∆°ng ·ª©ng
// Import Font Awesome icons n·∫øu d√πng component React ho·∫∑c ƒë·∫£m b·∫£o CSS global
// import { FaGlobe, FaLock, FaCaretDown, FaCamera } from 'react-icons/fa';

// Component hi·ªÉn th·ªã Profile ng∆∞·ªùi d√πng (ch·∫ø ƒë·ªô tƒ©nh/m·∫´u)
// C√°c ch·ª©c nƒÉng l∆∞u/c·∫≠p nh·∫≠t ch·ªâ l√† gi·∫£ l·∫≠p (log ra console, alert)
function ProfilePage() {
    // State l∆∞u tr·ªØ d·ªØ li·ªáu form ƒë·ªÉ ch·ªânh s·ª≠a (d·ªØ li·ªáu m·∫´u)
    const [formData, setFormData] = useState({
        username: 'Sample User Name', // D·ªØ li·ªáu m·∫´u
        email: 'sample.user@example.com', // D·ªØ li·ªáu m·∫´u
    });
    // State cho file avatar m·ªõi ƒë∆∞·ª£c ch·ªçn (ch·ªâ ƒë·ªÉ hi·ªÉn th·ªã preview t·∫°m th·ªùi)
    const [avatarFile, setAvatarFile] = useState(null);
     // State cho URL preview c·ªßa ·∫£nh m·ªõi (n·∫øu ch·ªçn file)
     const [avatarPreviewUrl, setAvatarPreviewUrl] = useState(null);
    // State ri√™ng cho m·∫≠t kh·∫©u m·ªõi (kh√¥ng l∆∞u v√†o formData chung)
    const [newPassword, setNewPassword] = useState('');
    const [confirmPassword, setConfirmPassword] = useState('');

    // State cho tr·∫°ng th√°i hi·ªÉn th·ªã dropdown c√¥ng khai
    const [isVisibilityDropdownOpen, setIsVisibilityDropdownOpen] = useState(false);
    const [visibility, setVisibility] = useState('public'); // D·ªØ li·ªáu m·∫´u

    // TODO: N·∫øu b·∫°n c√≥ d·ªØ li·ªáu user m·∫´u ph·ª©c t·∫°p h∆°n ho·∫∑c c·∫ßn load t·ª´ JSON file tƒ©nh, c√≥ th·ªÉ d√πng useEffect ·ªü ƒë√¢y

     // Cleanup URL.createObjectURL khi component unmount ho·∫∑c file thay ƒë·ªïi
     useEffect(() => {
         // Khi avatarPreviewUrl thay ƒë·ªïi (ch·ªçn file m·ªõi ho·∫∑c null), revoke URL c≈©
         return () => {
             if (avatarPreviewUrl) {
                 URL.revokeObjectURL(avatarPreviewUrl);
             }
         };
     }, [avatarPreviewUrl]); // Ch·∫°y cleanup khi avatarPreviewUrl thay ƒë·ªïi


    // H√†m x·ª≠ l√Ω thay ƒë·ªïi input form (username, email)
    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setFormData(prevData => ({
            ...prevData,
            [name]: value
        }));
    };

    // H√†m x·ª≠ l√Ω thay ƒë·ªïi input m·∫≠t kh·∫©u m·ªõi
    const handlePasswordInputChange = (e) => {
        const { name, value } = e.target;
        if (name === 'newPassword') {
            setNewPassword(value);
        } else if (name === 'confirmPassword') {
            setConfirmPassword(value);
        }
    };

     // H√†m x·ª≠ l√Ω ch·ªçn file avatar m·ªõi v√† t·∫°o preview URL
    const handleAvatarFileChange = (e) => {
        const file = e.target.files[0];
        if (file) {
            setAvatarFile(file);
            // T·∫°o URL t·∫°m th·ªùi cho ·∫£nh preview
            const previewUrl = URL.createObjectURL(file);
             // Thu h·ªìi URL c≈© tr∆∞·ªõc khi t·∫°o URL m·ªõi
             if (avatarPreviewUrl) {
                 URL.revokeObjectURL(avatarPreviewUrl);
             }
            setAvatarPreviewUrl(previewUrl); // L∆∞u URL preview
        } else {
            setAvatarFile(null);
            // X√≥a ·∫£nh preview n·∫øu kh√¥ng ch·ªçn file
            if (avatarPreviewUrl) {
                URL.revokeObjectURL(avatarPreviewUrl);
            }
            setAvatarPreviewUrl(null);
        }
    };


    // H√†m x·ª≠ l√Ω click n√∫t "Save Profile" (Gi·∫£ l·∫≠p)
    const handleSaveChangesProfile = (event) => {
        event.preventDefault();
        console.log("Static Save Profile Clicked:", formData, "New Avatar File:", avatarFile);
        alert("Save Profile functionality is a placeholder in this static version.");
        // TODO: Trong ·ª©ng d·ª•ng th·∫≠t, g·ªçi API c·∫≠p nh·∫≠t profile
    };


    // H√†m x·ª≠ l√Ω click n√∫t "Update Password" (Gi·∫£ l·∫≠p)
     const handleUpdatePassword = (event) => {
        event.preventDefault();
         console.log("Static Update Password Clicked:", { newPassword, confirmPassword });

         // Client-side validation ƒë∆°n gi·∫£n
         if (!newPassword || !confirmPassword) {
             alert("Please enter new password and confirm password.");
             return;
         }
         if (newPassword !== confirmPassword) {
             alert("New password and confirm password do not match.");
             return;
         }
        alert("Update Password functionality is a placeholder in this static version.");
        // TODO: Trong ·ª©ng d·ª•ng th·∫≠t, g·ªçi API c·∫≠p nh·∫≠t password
         setNewPassword(''); // X√≥a m·∫≠t kh·∫©u ƒë√£ nh·∫≠p sau khi gi·∫£ l·∫≠p
         setConfirmPassword('');
    };


    // H√†m x·ª≠ l√Ω dropdown hi·ªÉn th·ªã c√¥ng khai
    const toggleVisibilityDropdown = () => {
        setIsVisibilityDropdownOpen(!isVisibilityDropdownOpen);
    };

    const handleVisibilitySelect = (value) => {
        setVisibility(value);
        setIsVisibilityDropdownOpen(false);
        console.log("Static Visibility changed to:", value);
    };


    return (
        <div className="page-content profile-page-container"> {/* S·ª≠ d·ª•ng className cho container ch√≠nh */}
            {/* Kh√¥ng c√≥ hi·ªÉn th·ªã l·ªói/th√†nh c√¥ng t·ª´ API ·ªü ƒë√¢y trong b·∫£n tƒ©nh */}

            <div className="profile-header">
              <h2>Skill Profile</h2>
              {/* Ph·∫ßn hi·ªÉn th·ªã c√¥ng khai */}
              <div className="visibility-selector">
                <button id="visibility-dropdown-btn" className="visibility-btn" onClick={toggleVisibilityDropdown}>
                   {visibility === 'public' ? 'üåê Public' : 'üîí Private'} ‚ñº
                </button>
                {isVisibilityDropdownOpen && (
                    <div id="visibility-dropdown" className="visibility-dropdown">
                      <div className="dropdown-item" onClick={() => handleVisibilitySelect('public')}>
                         Public
                      </div>
                      <div className="dropdown-item" onClick={() => handleVisibilitySelect('private')}>
                         Private
                      </div>
                    </div>
                )}
              </div>
            </div>
            <p className="profile-description">Create your skill profile to showcase your skills.</p>

            {/* --- Ph·∫ßn Profile Section --- */}
            <div className="profile-section">
              <h3>Profile picture</h3>
              <div className="profile-picture-container">
                 {/* Hi·ªÉn th·ªã avatar m·∫´u ho·∫∑c preview ·∫£nh m·ªõi */}
                <img
                    src={avatarPreviewUrl || '/creator-ava.png'} // S·ª≠ d·ª•ng avatarPreviewUrl n·∫øu c√≥, ng∆∞·ª£c l·∫°i d√πng ·∫£nh m·∫´u
                    alt="Profile Picture"
                    id="profile-image"
                    className="profile-picture"
                 />
                 {/* N√∫t Edit v√† input file ·∫©n cho avatar */}
                <button className="edit-btn" onClick={() => document.getElementById('profile-pic-upload').click()}>Edit</button>
                <input
                    type="file"
                    id="profile-pic-upload"
                    accept="image/*"
                    style={{display:'none'}} // ·∫®n input file g·ªëc
                    onChange={handleAvatarFileChange} // X·ª≠ l√Ω khi file ƒë∆∞·ª£c ch·ªçn
                />
              </div>
            </div>

            <div className="profile-section">
              <h3>Name<span className="required">*</span></h3>
              <input
                type="text"
                className="form-control-us"
                name="username"
                value={formData.username}
                onChange={handleInputChange}
              />
            </div>

            <div className="profile-section">
              <h3>Email<span className="required">*</span></h3>
              <div className="email-section">
                <input
                    type="email"
                    className="form-control-us"
                    name="email"
                    value={formData.email}
                    onChange={handleInputChange}
                    // email m·∫´u tƒ©nh, kh√¥ng disable
                />
              </div>
            </div>


            {/* --- Ph·∫ßn Update Password --- */}
            <div className="settings-section">
              <h2>Password</h2>
              <p className="settings-description">Use the form below to update your password.</p>

              <div className="password-fields">
                <div className="field-group">
                  <label htmlFor="new-password">New Password</label>
                  <input
                    type="password"
                    className="form-control-us"
                    id="new-password"
                    name="newPassword"
                    placeholder="New password"
                    value={newPassword}
                    onChange={handlePasswordInputChange}
                  />
                </div>

                <div className="field-group">
                  <label htmlFor="confirm-password">Confirm New Password</label>
                  <input
                    type="password"
                    className="form-control-us"
                    id="confirm-password"
                    name="confirmPassword"
                    placeholder="Confirm New Password"
                    value={confirmPassword}
                    onChange={handlePasswordInputChange}
                  />
                </div>

                <button
                    className="update-password-btn"
                    onClick={handleUpdatePassword} // G·ªçi h√†m gi·∫£ l·∫≠p
                    // disabled={isUpdatingPassword} // B·ªè disabled loading API
                >
                    Update Password
                </button>
              </div>
            </div>

            {/* --- Ph·∫ßn Save Profile Actions --- */}
            <div className="profile-actions-section" style={{marginTop: '30px', paddingTop: '20px', borderTop: '1px solid #eee', textAlign: 'right'}}>
              <button
                className="save-profile-btn"
                onClick={handleSaveChangesProfile} // G·ªçi h√†m gi·∫£ l·∫≠p
                 // disabled={isSavingProfile} // B·ªè disabled loading API
              >
                Save Profile
              </button>
            </div>
        </div>
    );
}

export default ProfilePage;