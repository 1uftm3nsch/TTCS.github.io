import React, { useState } from "react";
import "./Login.css";
import githubIcon from "../../assets/img/github_Icon.png";
import googleIcon from "../../assets/img/google_Icon.png";
import { Link, useNavigate } from "react-router-dom";

// ƒê·∫£m b·∫£o firebaseConfig, auth, googleProvider, githubProvider ƒë∆∞·ª£c c·∫•u h√¨nh ƒë√∫ng
import { auth, googleProvider, githubProvider } from "../../firebase/firebaseConfig";
import { signInWithPopup } from "firebase/auth";

// Import th∆∞ vi·ªán js-cookie
import Cookies from 'js-cookie';

// Import useAuth t·ª´ AuthContext c·ªßa b·∫°n
import { useAuth } from '../../context/AuthContext'; // <-- ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n ƒë√∫ng


const Login = () => {
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [successMessage, setSuccessMessage] = useState(null);
  const navigate = useNavigate();

  // S·ª≠ d·ª•ng useAuth ƒë·ªÉ l·∫•y h√†m loginSuccess
  const { loginSuccess } = useAuth(); // <-- L·∫•y loginSuccess t·ª´ Context


  // H√†m x·ª≠ l√Ω response API chung (l∆∞u token v√†o cookie, th√¥ng b√°o, ƒëi·ªÅu h∆∞·ªõng, v√† c·∫≠p nh·∫≠t AuthContext)
  const handleApiResponse = async (response) => {
    const data = await response.json();

    if (response.ok) {
      console.log("ƒêƒÉng nh·∫≠p th√†nh c√¥ng:", data);
      // --- L∆∞u Token v√†o Cookie ---
      if (data.tokens && data.tokens.access && data.tokens.refresh) {
          // L∆∞u token v√†o cookie (c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh expires, secure, sameSite)
          Cookies.set('access_token', data.tokens.access, { expires: 1/24, secure: true, sameSite: 'Strict' });
          Cookies.set('refresh_token', data.tokens.refresh, { expires: 7, secure: true, sameSite: 'Strict' });

           // T√πy ch·ªçn: l∆∞u th√™m th√¥ng tin user nh∆∞ username, email, role v√†o cookie ho·∫∑c state/context
          Cookies.set('user_username', data.username, { expires: 7, secure: true, sameSite: 'Strict' });
          Cookies.set('user_email', data.email, { expires: 7, secure: true, sameSite: 'Strict' });

          // --- G·ªåI loginSuccess ƒê·ªÇ C·∫¨P NH·∫¨T TR·∫†NG TH√ÅI TRONG AuthContext ---
          loginSuccess(data.tokens.access); // Truy·ªÅn token ho·∫∑c ch·ªâ g·ªçi kh√¥ng tham s·ªë t√πy AuthContext

          setSuccessMessage("ƒêƒÉng nh·∫≠p th√†nh c√¥ng!");
          setError(null);
          // ƒêi·ªÅu h∆∞·ªõng sau m·ªôt kho·∫£ng th·ªùi gian ng·∫Øn
          setTimeout(() => navigate("/"), 500);

      } else {
          // API th√†nh c√¥ng nh∆∞ng kh√¥ng c√≥ token (tr∆∞·ªùng h·ª£p √≠t x·∫£y ra v·ªõi API login)
          setError("ƒêƒÉng nh·∫≠p th√†nh c√¥ng nh∆∞ng kh√¥ng nh·∫≠n ƒë∆∞·ª£c token.");
          console.error("API response ok but no token:", data);
          setSuccessMessage(null);
      }

    } else {
      // X·ª≠ l√Ω l·ªói t·ª´ backend (response.ok l√† false)
      const errorMessage = data.detail || data.message || data.error || JSON.stringify(data);
      setError("L·ªói ƒëƒÉng nh·∫≠p: " + errorMessage);
      console.error("L·ªói ƒëƒÉng nh·∫≠p API response:", data);
      setSuccessMessage(null);
    }
  };

  // H√†m x·ª≠ l√Ω ƒëƒÉng nh·∫≠p b·∫±ng Username/Password
  const handleStandardLogin = async (payload) => {
     setIsLoading(true);
     setError(null);
     setSuccessMessage(null);
    try {
      const response = await fetch("http://localhost:8000/api/login/", { // <-- ƒê·∫£m b·∫£o ƒë√∫ng endpoint API login
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });

      await handleApiResponse(response); // S·ª≠ d·ª•ng h√†m x·ª≠ l√Ω response chung

    } catch (err) {
      console.error("L·ªói k·∫øt n·ªëi server (Standard Login):", err);
      setError("L·ªói k·∫øt n·ªëi t·ªõi server.");
      setSuccessMessage(null);
    } finally {
      setIsLoading(false);
    }
  };

   // H√†m x·ª≠ l√Ω ƒëƒÉng nh·∫≠p b·∫±ng Social (Google/Github)
   const handleSocialLoginRequest = async (payload) => {
      setIsLoading(true);
      setError(null);
      setSuccessMessage(null);
       try {
         // API social login nh·∫≠n email
         const response = await fetch("http://localhost:8000/api/social-login/", { // <-- ƒê·∫£m b·∫£o ƒë√∫ng endpoint API social login
             method: "POST",
             headers: { "Content-Type": "application/json" },
             body: JSON.stringify(payload),
         });

         await handleApiResponse(response); // S·ª≠ d·ª•ng h√†m x·ª≠ l√Ω response chung

       } catch (err) {
         console.error("L·ªói k·∫øt n·ªëi server (Social Login):", err);
         setError("L·ªói k·∫øt n·ªëi t·ªõi server.");
         setSuccessMessage(null);
       } finally {
         setIsLoading(false);
       }
   };


  // H√†m x·ª≠ l√Ω submit form ƒëƒÉng nh·∫≠p (Username/Password)
  const handleLoginSubmit = async (e) => {
    e.preventDefault();
    if (!username || !password) {
        setError("Vui l√≤ng nh·∫≠p t√™n ƒëƒÉng nh·∫≠p v√† m·∫≠t kh·∫©u.");
        setSuccessMessage(null);
        return;
    }
    const payload = { username, password };
    await handleStandardLogin(payload); // G·ªçi h√†m x·ª≠ l√Ω standard login
  };


  // H√†m x·ª≠ l√Ω click n√∫t Google Login (s·ª≠ d·ª•ng Firebase)
  const handleGoogleLogin = async () => {
     setError(null);
     setSuccessMessage(null);
     setIsLoading(true); // B·∫Øt ƒë·∫ßu loading cho social login
    try {
      const result = await signInWithPopup(auth, googleProvider);
      const user = result.user; // User object t·ª´ Firebase

      // L·∫•y email t·ª´ Firebase user
      const email = user.email;
      if (!email) {
          setError("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin email t·ª´ Google.");
          setSuccessMessage(null);
          setIsLoading(false); // K·∫øt th√∫c loading
          return;
      }

      const payload = { email: email }; // Payload ch·ªâ g·ªìm email cho social login API
      await handleSocialLoginRequest(payload); // G·ªçi h√†m x·ª≠ l√Ω social login API

    } catch (err) {
      console.error("Google login error:", err);
       // X·ª≠ l√Ω l·ªói Firebase popup
       let errorMessage = "L·ªói ƒëƒÉng nh·∫≠p Google.";
       if (err.code) {
           errorMessage += ` M√£ l·ªói: ${err.code}`;
       }
       if (err.message) {
           errorMessage += ` Chi ti·∫øt: ${err.message}`;
       }
      setError(errorMessage);
       setSuccessMessage(null);
    } finally {
         setIsLoading(false); // Lu√¥n k·∫øt th√∫c loading
    }
  };


  // H√†m x·ª≠ l√Ω click n√∫t Github Login (s·ª≠ d·ª•ng Firebase)
  const handleGithubLogin = async () => {
      setError(null);
      setSuccessMessage(null);
      setIsLoading(true); // B·∫Øt ƒë·∫ßu loading cho social login
    try {
      const result = await signInWithPopup(auth, githubProvider);
      const user = result.user; // User object t·ª´ Firebase

      // L·∫•y email t·ª´ Firebase user
      const email = user.email;
       if (!email) {
           setError("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin email t·ª´ Github.");
            setSuccessMessage(null);
            setIsLoading(false); // K·∫øt th√∫c loading
           return;
       }

      const payload = { email: email }; // Payload ch·ªâ g·ªìm email cho social login API
      await handleSocialLoginRequest(payload); // G·ªçi h√†m x·ª≠ l√Ω social login API

    } catch (err) {
      console.error("GitHub login error:", err);
       // X·ª≠ l√Ω l·ªói Firebase popup
       let errorMessage = "L·ªói ƒëƒÉng nh·∫≠p Github.";
        if (err.code) {
           errorMessage += ` M√£ l·ªói: ${err.code}`;
       }
       if (err.message) {
           errorMessage += ` Chi ti·∫øt: ${err.message}`;
       }
      setError(errorMessage);
       setSuccessMessage(null);
    } finally {
        setIsLoading(false); // Lu√¥n k·∫øt th√∫c loading
    }
  };


  return (
    <>
      <div className="login-container">
        <div className="login-box">
          <h2 className="login-title">ƒêƒÉng nh·∫≠p</h2>
          <p className="login-subtitle">Ch√†o m·ª´ng tr·ªü l·∫°i ü•≥</p>

           {/* Hi·ªÉn th·ªã th√¥ng b√°o l·ªói ho·∫∑c th√†nh c√¥ng */}
           {error && <div className="error-message">{error}</div>}
           {successMessage && <div className="success-message">{successMessage}</div>}


          <div className="social-buttons">
             {/* Th√™m disabled khi ƒëang loading */}
            <button className="social-button google" onClick={handleGoogleLogin} disabled={isLoading}>
              <img src={googleIcon} alt="Google" className="icon" />
              <span>K·∫øt n·ªëi b·∫±ng Google</span>
            </button>
             {/* Th√™m disabled khi ƒëang loading */}
            <button className="social-button github" onClick={handleGithubLogin} disabled={isLoading}>
              <img src={githubIcon} alt="Github" className="icon" />
              <span>K·∫øt n·ªëi b·∫±ng Github</span>
            </button>
          </div>

          <div className="divider">HO·∫∂C</div>

          <form className="login-form" onSubmit={handleLoginSubmit}>
            <input
              type="text"
              placeholder="T√™n ƒëƒÉng nh·∫≠p"
              className="login-input"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              disabled={isLoading} // Th√™m disabled khi ƒëang loading
            />
            <input
              type="password"
              placeholder="M·∫≠t kh·∫©u"
              className="login-input"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
               disabled={isLoading} // Th√™m disabled khi ƒëang loading
            />
            <button type="submit" className="login-button" disabled={isLoading}>
                {isLoading ? 'ƒêang x·ª≠ l√Ω...' : 'ƒêƒÉng nh·∫≠p'} {/* Text ƒë·ªông khi loading */}
            </button>
          </form>

          <p className="reset-password">
            <Link to="/resetPasswordEmail">Qu√™n m·∫≠t kh·∫©u?</Link>
          </p>
          <p className="signup-link">
            Ch∆∞a c√≥ t√†i kho·∫£n? <Link to="/signup">ƒêƒÉng k√Ω</Link>
          </p>
        </div>
      </div>
    </>
  );
};

export default Login;
